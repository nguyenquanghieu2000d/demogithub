# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\main.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtCore import Qt
import json
from PyQt5 import QtCore, QtGui, QtWidgets
import requests
import threading
from device_bitable import DeviceBitable
import time

class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data

    def data(self, index, role):
        if role == Qt.DisplayRole:
            return self._data[index.row()][index.column()]

    def rowCount(self, index):
        return len(self._data)

    def columnCount(self, index):
        return len(self._data[0])

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(785, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.name = QtWidgets.QLineEdit(self.centralwidget)
        self.name.setGeometry(QtCore.QRect(260, 10, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.name.setFont(font)
        self.name.setObjectName("name")
        self.add_device = QtWidgets.QPushButton(self.centralwidget)
        self.add_device.setGeometry(QtCore.QRect(410, 10, 75, 31))
        self.add_device.setObjectName("add_device")
        self.start_test = QtWidgets.QPushButton(self.centralwidget)
        self.start_test.setGeometry(QtCore.QRect(340, 540, 131, 31))
        self.start_test.setObjectName("start_test")
        self.list_device = QtWidgets.QTableView(self.centralwidget)
        self.list_device.setGeometry(QtCore.QRect(20, 110, 743, 421))
        self.list_device.setObjectName("list_device")
        self.token = QtWidgets.QTextEdit(self.centralwidget)
        self.token.setGeometry(QtCore.QRect(20, 47, 743, 61))
        self.token.setObjectName("token")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.data = [
          ["Name", "Name bluetooth", "Ip lan", "Ip wifi", "Success", "Fail", "Log"]
        ]

        self.threads = []
        self.model = TableModel(self.data)
        self.list_device.setModel(self.model)
        self.name.setText("BITABLE_")
        self.event()
        self.login()

    def login(self):
        response = requests.post('http://api.cms.beetai.com/api/user/login', json = {'email':'admin@beetsoft.com.vn', "password" : "beetai@2019"})
        res = json.loads(response.text)
        self.token.setText(res['access_token'])
        self.token.setEnabled(False)
        # print(res)

    def in_array(self, name_device):
        for item in self.data:
            if name_device == item[0]:
                return True
        return False
    
    def call_api(self, name_device):
        try:
            respose = requests.get("http://api.bitableconnect.beetai.com/get-ip-box?id=" + name_device)
            data_json = json.loads(respose.text)
            return data_json['lan'], data_json['wifi']
        except:
            return None, None
        
    def add_device_to_list(self, device):
        device = device.upper()
        lan, wifi = self.call_api(device)
        if lan != None:
            # self.devices.append(device)
            self.data.append([device, device, lan, wifi, "0/0", "0/0", "LOG"])
            self.model = TableModel(self.data)
            self.list_device.setModel(self.model)
        self.name.setText("BITABLE_")

    def event(self):
        self.list_device.clicked.connect(self.func_test)
        self.add_device.clicked.connect(self.add_new)
        self.start_test.clicked.connect(self.handle_start)
    
    def handle_start(self):
        token = self.token.toPlainText()
        if len(token) == 0:
            print("missing token !!!")
            return
        if len(self.data) <= 1:
            return
        print(self.data[1: len(self.data)])
        d = DeviceBitable(self.data[1: len(self.data)], self.token.toPlainText())
        thr = threading.Thread(target=d.run, args=())
        thr.start()

    def add_new(self):
        name_device = self.name.text()
        self.add_device_to_list(name_device)
        print(name_device)

    def func_test(self, item):
        print(item.column(), item.row())

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.name.setPlaceholderText(_translate("MainWindow", "Tên thiết bị"))
        self.add_device.setText(_translate("MainWindow", "Add"))
        self.start_test.setText(_translate("MainWindow", "Start"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
